Process: An instance of the Python interpreter has at least one thread called the MainThread.

Thread: A thread of execution within a Python process, such as the MainThread or a new thread.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

Thread :
````````
Thread is a seperate flow of execution,Every thread has a task.

Multithreading:
````````````````
Using multiple threads in a program or process is called multithreading.

In Python:
``````````
When we start any python program, one thread begins running immediately, which is called main thread.

#!/usr/bin/python3
import threading
thread = threading.current_thread().getName()
print(thread)

# py 1.py
MainThread
___________________________________________


# vim e1.py

#!/usr/bin/python3
import time

def func1(name1):
    print(f"Thread {name1}: running for next 5 secs")
    time.sleep(5)
    print(f"Thread {name1}: finishing")
    print("---------------------------")



def func2(name2):
    print(f"Thread {name2}: running for next 4 secs")
    time.sleep(4)
    print(f"Thread {name2}: finishing")
    print("---------------------------")

def func3(name3):
    print("Thread {name3}: running for next 3 secs")
    time.sleep(3)
    print(f"Thread {name3}: finishing")
    print("---------------------------")


start = time.perf_counter()

func1(1)
func2(2)
func3(3)

end = time.perf_counter()
print('Execution Time: {}'.format(end-start))
print("All done")

# python3 e1.py

TO CHECK:
`````````
# watch -n 0 'pstree -p'
________________________________________________________________________
with Threads:
``````````````

#!/usr/bin/python3
import threading, time

def func1(name1):
    print("Thread {}: running for next 5 secs".format(name1))
    time.sleep(5)
    print("Thread {}: finishing".format(name1))
    print("---------------------------")
def func2(name2):
    print("Thread {}: running for next 4 secs ".format(name2))
    time.sleep(4)
    print("Thread {}: finishing".format(name2))
    print("---------------------------")
def func3(name3):
    print("Thread {}: running for next 3 secs".format(name3))
    time.sleep(3)
    print("Thread {}: finishing".format(name3))
    print("---------------------------")


start = time.perf_counter()

t1 = threading.Thread(target=func1, args=[1])
t2 = threading.Thread(target=func2, args=[2])
t3 = threading.Thread(target=func3, args=[3])

t1.start()
t2.start()
t3.start()

end = time.perf_counter()
print('Execution Time: {}'.format(end-start))
print("All done")

_____________________________________________________________
with join()
````````````
The .join() method delays a programâ€™s flow of execution until the target thread has been completely read.


#!/usr/bin/python3
import threading, time

def func1(name1):
    print("Thread {}: running for next 5 secs".format(name1))
    time.sleep(5)
    print("Thread {}: finishing".format(name1))
    print("---------------------------")
def func2(name2):
    print("Thread {}: running for next 4 secs ".format(name2))
    time.sleep(4)
    print("Thread {}: finishing".format(name2))
    print("---------------------------")
def func3(name3):
    print("Thread {}: running for next 3 secs".format(name3))
    time.sleep(3)
    print("Thread {}: finishing".format(name3))
    print("---------------------------")


start = time.perf_counter()

t1 = threading.Thread(target=func1, args=[1])
t2 = threading.Thread(target=func2, args=[2])
t3 = threading.Thread(target=func3, args=[3])

t1.start()
t2.start()
t3.start()
t1.join()
t2.join()
t3.join()

end = time.perf_counter()
print('Execution Time: {}'.format(end-start))
print("All done")
